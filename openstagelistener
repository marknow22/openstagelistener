#! /bin/sh
### BEGIN INIT INFO
# Provides:          openstagelistener
# Required-Start:    
# Required-Stop:     
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: listens for certain actions on the network of openstage phones
# Description:       listens for certain actions on the network of openstage phones "uc_entry_type=106" onhook and "SELECT indial_name FROM tblattendantindials WHERE indial_number=" offhook and puts this into a status file
### END INIT INFO
#Listens for Openstage Messages at MyPortal
# Author: Name <mark.now@web.de>
#(c) 2019 Markus Nowatzki
#v0.1
#GPL-3.0-or-later
#    This program comes with ABSOLUTELY NO WARRANTY; 
#    This is free software, and you are welcome to redistribute it
#    under certain conditions; 

. /lib/lsb/init-functions

NAME=openstagelistener
DESC="to listen for certain actions on the network of openstage phones with"
DAEMONSTRT=./openstagelistenerdstrt
DAEMONSTP=./openstagelistenerdstp
PIDFILE=/tmp/openstagelistener.pid
CONTROLFILE_ON="/tmp/openstageOn"
MOBILEFILE_ON="/tmp/MobileOn"
CONTROLFILE_OFF="/tmp/openstageOff"
LOGFILE="/var/log/openstage.log"
MYPORTALMACHINE=""   #Ip adress or Name of machine where myportal is running
INTERFACE="eth0"
COUNTER=10
ALLOW_RUN_STARTUP=true
$CURRENTUSER="" 
#Icon
PIPE="$HOME/.pipe.tmp"
exec 3<> $PIPE

start_openstage() {
		log_daemon_msg "Starting $DESC" "$NAME"
		
		if [ -f "$PIDFILE" ]; then
		  log_failure_msg \
		  "$NAME is already running."
		  notify-send "$NAME is already running."
		  exit 1
		fi
	        
               while ( ! ping -c 1 $MYPORTALMACHINE 2>&1 >/dev/null ); do
		      echo -n .
      			let counter=counter+1
      			if [ $counter = 2 ] ; then
          			log_failure_msg \
 				"Mac not there. No MyPortal."
                                notify-send "$MYPORTALMACHINE not there. No MyPortal."
				echo "icon:$HOME/.icons/openstageoff.png" >&3
          			exit 1
      			fi
      			sleep 1
	      done
 
               	
		start-stop-daemon --start --quiet --oknodo --pidfile "$PIDFILE" \
		    --exec "$DAEMONSTRT"
		log_end_msg $?
}

stop_openstage() {	      
	      log_daemon_msg "Stopping $DESC" "$NAME"
	      
	      if [ ! -f "$PIDFILE" ]; then
		  log_failure_msg \
		  "$NAME seems to be not running. No $PIDFILE. Maybe check processes manually."
                  notify-send "$NAME seems to be not running. No $PIDFILE. Maybe check processes manually."
		  exit 1
	      fi
	      
	    #CHange user and path on myportalmachine  
		su $CURRENTUSER -c "ssh $MYPORTALMACHINE sudo ./killallngrep"
		killall openstage
		echo "Remove Statusfiles"
		rm -vf $CONTROLFILE_ON
		rm -vf $CONTROLFILE_OFF
	      start-stop-daemon --stop --quiet --oknodo --retry 5 --pidfile "$PIDFILE" \
		  --exec "$DAEMONSTRT"
	      log_end_msg $?
	      rm -f $PIDFILE
	      ./openstagelistener status
}

# Aktionen
case "$1" in
    start) 
    if [ "$ALLOW_RUN_STARTUP" != "true" ]; then
        log_action_msg "Not starting $NAME: disabled in init script. Try force-start"
        exit 0
    fi
    start_openstage	
    ;;
    stop)
	stop_openstage
        ;;
    status)
    	if [ -f "$PIDFILE" ]; then
	      log_success_msg \
	      "$NAME is running."
	      echo "icon:$HOME/.icons/openstage.png" >&3
 	      notify-send "$NAME is running"
	      exit 0
	else
	     log_failure_msg \
	      "$NAME is not running."
	      echo "icon:$HOME/.icons/openstageoff.png" >&3
	      notify-send "$NAME is not running"
	      exit 0
	fi
	;;
    restart|force-reload)
	stop_openstage
	start_openstage
        ;;
    force-start)
        start_openstage
        ;;
    force-restart)
	stop_openstage
	start_openstage
        ;;
    force-reload)
	stop_openstage
	start_openstage
	;;
    *)
        echo "Usage: $0 {start|stop|restart|force-reload}"
        exit 2
        ;;
esac

exit 0
